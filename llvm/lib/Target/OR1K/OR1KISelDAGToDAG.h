//=- OR1KISelDAGToDAG.h - A dag to dag inst selector for OR1K ---===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the OR1K target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_OR1K_OR1KISELDAGTODAG_H
#define LLVM_LIB_TARGET_OR1K_OR1KISELDAGTODAG_H

#include "OR1K.h"
#include "OR1KTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

// OR1K-specific code to select OR1K machine instructions for
// SelectionDAG operations.
namespace llvm {
class OR1KDAGToDAGISel : public SelectionDAGISel {
  const OR1KSubtarget *Subtarget = nullptr;

public:
  explicit OR1KDAGToDAGISel(OR1KTargetMachine &TM) : SelectionDAGISel(TM) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<OR1KSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "OR1KGenDAGISel.inc"
};

class OR1KDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;
  explicit OR1KDAGToDAGISelLegacy(OR1KTargetMachine &TM)
      : SelectionDAGISelLegacy(ID, std::make_unique<OR1KDAGToDAGISel>(TM)) {}
};

} // namespace llvm

#endif // LLVM_LIB_TARGET_OR1K_OR1KISELDAGTODAG_H
